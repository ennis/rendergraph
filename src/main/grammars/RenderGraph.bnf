{
  parserClass="patapon.rendergraph.lang.parser.RenderGraphParser"
  parserUtilClass='patapon.rendergraph.lang.parser.RenderGraphParserUtil'

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rg"
  psiImplClassSuffix="Impl"
  psiPackage="patapon.rendergraph.lang.psi"
  psiImplPackage="patapon.rendergraph.lang.psi.impl"

  elementTypeHolderClass="patapon.rendergraph.lang.psi.RgElementTypes"
  elementTypeClass="patapon.rendergraph.lang.psi.RgElementType"
  tokenTypeClass="patapon.rendergraph.lang.psi.RgTokenType"

  // expression rules
  extends(".*Expression")=expression


  tokens = [
          LBRACE      =  '{'
          RBRACE      =  '}'
          LBRACK      =  '['
          RBRACK      =  ']'
          LPAREN      =  '('
          RPAREN      =  ')'
          COLON       =  ':'
          COLONCOLON  =  '::'
          SEMICOLON   =  ';'
          COMMA       =  ','
          EQ          =  '='
          EXCLEQ      =  '!='
          EQEQ        =  '=='
          SHA         =  '#'
          EXCL        =  '!'
          PLUSEQ      =  '+='
          PLUSPLUS    =  '++'
          PLUS        =  '+'
          MINUSEQ     =  '-='
          MINUSMINUS  =  '--'
          MINUS       =  '-'
          OREQ        =  '|='
          ANDAND      =  '&&'
          ANDEQ       =  '&='
          AND         =  '&'
          OR          =  '|'
          OROR        =  '||'
          LT          =  '<'
          LTEQ        =  '<='
          XOREQ       =  '^='
          XOR         =  '^'
          MULEQ       =  '*='
          MUL         =  '*'
          DIVEQ       =  '/='
          DIV         =  '/'
          REMEQ       =  '%='
          REM         =  '%'
          GT          =  '>'
          GTEQ        =  '>='
          DOT         =  '.'
          DOTDOT      =  '..'
          DOTDOTDOT   =  '...'
          FAT_ARROW   =  '=>'
          ARROW       =  '->'
          Q           =  '?'
          AT          =  '@'
          UNDERSCORE  =  '_'
          DOLLAR      =  '$'
          SYNTHETIC_SEMICOLON = 'SYNTHETIC_SEMICOLON'
          //EOL         =  '<NL>'
          COMPONENT_KW = 'component'
          PASS_KW      = 'pass'
          IMPORT_KW    = 'import'
          MODULE_KW    = 'module'
          UNIFORM_KW   = 'uniform'

        EOL='regexp:\n'
        SPACE='regexp: +'
        comment='regexp://.*'
        INT_LITERAL='regexp:\d+(\.\d*)?'
        identifier='regexp:\p{Alpha}\w*'
        string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  ]
}


//====================================================================
Document ::= module

//Document ::= PrimitiveTopologyItem
private semi ::= ';'

//initializer ::= expression

//====================================================================
// MODULE & IMPORTS
//private moduleRecover ::= !(ImportDirective | item)
module ::= (MODULE_KW identifier semi)? imports moduleContents {
    pin=1
    implements = [ "patapon.rendergraph.lang.psi.RgNamedDeclaration" ]
    mixin = "patapon.rendergraph.lang.psi.impl.RgNamedElementImpl"
    methods = [ nameIdentifier="identifier" ]
}

moduleContents ::= item*
imports ::= import*
private importRecover ::= !(item)
import ::= IMPORT_KW path semi { pin=1 }

//====================================================================
attribute ::= '@' path ('(' ')')?
private attributeList ::= attribute*

//====================================================================
// ITEMS
private item ::= (variable
                | component
                | function)

//====================================================================
// PATHS

path ::= identifier ('.' identifier)*

//====================================================================
type ::= path

//====================================================================
qualifier ::= const | UNIFORM_KW

variable ::= attributeList qualifier? val identifier (':' type)? ('=' expression)? semi {
    pin=3
    implements = [ "patapon.rendergraph.lang.psi.RgNamedDeclaration" ]
    mixin = "patapon.rendergraph.lang.psi.impl.RgNamedElementImpl"
    methods = [ nameIdentifier="identifier" ]
}


//====================================================================
/*private paramRecover ::= !(')' | semi)
private primitiveTopologyChoices ::= 'point' | 'line' | 'triangle' {pin=".*" recoverWhile=paramRecover}
primitiveTopology ::= 'primitive_topology' '(' primitiveTopology ')' semi { pin=2 implements="patapon.rendergraph.lang.psi.ext.RgRenderPassItem" }
vertexShader ::= 'vertex' '(' pathImpl ')' semi  { pin=2 implements="patapon.rendergraph.lang.psi.ext.RgRenderPassItem" }
fragmentShader ::= 'fragment' '(' pathImpl ')' semi { pin=2 implements="patapon.rendergraph.lang.psi.ext.RgRenderPassItem" }
geometryShader ::= 'geometry' '(' pathImpl ')' semi  { pin=2 implements="patapon.rendergraph.lang.psi.ext.RgRenderPassItem" }
tessControlShader ::= 'tess_control' '(' pathImpl ')' semi  { pin=2 implements="patapon.rendergraph.lang.psi.ext.RgRenderPassItem" }
tessEvalShader ::= 'tess_eval' '(' pathImpl ')' semi  { pin=2 implements="patapon.rendergraph.lang.psi.ext.RgRenderPassItem" }
depthTest ::= 'depth_test' '(' bool_literal ')' semi  { pin=2 implements="patapon.rendergraph.lang.psi.ext.RgRenderPassItem" }*/

//====================================================================
private arglistRecover ::= !(')' | ',')

parameterQualifier ::= 'in' | 'out' | 'inout'

parameter ::= attributeList parameterQualifier? identifier ':' type {
    pin=3
    recoverWhile=arglistRecover
    implements = [ "patapon.rendergraph.lang.psi.RgNamedDeclaration" ]
    mixin = "patapon.rendergraph.lang.psi.impl.RgNamedElementImpl"
    methods = [ nameIdentifier="identifier" ]
}

private parameterList ::= parameter (',' parameter)*

function ::= attributeList fun identifier '(' parameterList? ')' (':' type)? (functionBody | semi) {
    implements = [ "patapon.rendergraph.lang.psi.RgNamedDeclaration" ]
    mixin = "patapon.rendergraph.lang.psi.impl.RgNamedElementImpl"
    methods = [ returnType="type" nameIdentifier="identifier" ]
}

//====================================================================
private memberRecover ::= !('}' | const | '@' | identifier | fun )

private memberDeclaration ::= !'}' ( variable | function ) {
    pin=1
    recoverWhile=memberRecover
}

baseComponentList ::= path (',' path)*

component ::= attributeList COMPONENT_KW identifier (':' baseComponentList)? '{' memberDeclaration* '}' {
    implements = [ "patapon.rendergraph.lang.psi.RgNamedDeclaration" ]
    mixin = "patapon.rendergraph.lang.psi.impl.RgNamedElementImpl"
    methods = [ nameIdentifier="identifier" ]
}

//====================================================================
// code
braceBalancedBlock ::=  ('{' braceBalancedBlock '}' | << unpairedToken >>)*

functionBody ::= block | '=' expression semi {
    methods = [ blockBody="block"; expressionBody="expression" ]
}

//====================================================================
block ::= '{' statement* '}'

//====================================================================
// statements
private statement ::= emptyStatement | expression semi

emptyStatement ::= semi {
    implements = ["patapon.rendergraph.lang.psi.RgStatement"]
}

//====================================================================
// expressions
expression ::= assignment
  | disjunction
  | conjunction
  | equality
  | relativeComparison
  | additiveExpression
  | multiplicativeExpression
  | prefixExpression
  | postfixExpression
  | qualification
  | atomicExpression

// Operators, sorted from lowest to highest precedence
private assignOp ::= '|=' | '^=' | '&=' | '=' | '+=' | '-=' | '*=' | '/=' | '%='
private equalityOp ::= '==' | '!='
private comparisonOp ::= '<' | '>' | '<=' | '>='
private additiveOp ::= '+' | '-'
private multiplicativeOp ::= '*' | '/' | '%'
private prefixOp ::= '-' | '+' | '--' | '++' | '!'
private postfixOp ::= '--' | '++'

assignment ::= expression assignOp expression
{ extends=expression rightAssociative=true }

disjunction ::= expression '||' expression
{ extends=expression }

conjunction ::= expression '&&' expression
{ extends=expression }

equality ::= expression equalityOp expression
{ extends=expression }

relativeComparison::= expression comparisonOp expression
{ extends=expression }

additiveExpression ::= expression additiveOp expression
{ extends=expression }

multiplicativeExpression ::= expression multiplicativeOp expression
{ extends=expression }

prefixExpression ::= prefixOp expression
{ extends=expression }

postfixExpression ::= expression postfixOp
{ extends=expression }

qualification ::= expression '.' identifier
{ extends=expression }

atomicExpression ::= parensExpression
                   | simpleReferenceExpression
                   | ifExpression
                   | returnExpression
                   | literal

parensExpression ::= '(' expression ')'
{ extends=expression }

simpleReferenceExpression ::= identifier { extends=expression }

ifExpression ::= if "(" expression ")" expression (else expression)?
{ extends=expression }

returnExpression ::= return expression
{ extends=expression }

literal ::= BOOL_LITERAL | INT_LITERAL | UINT_LITERAL | FLOAT_LITERAL | DOUBLE_LITERAL